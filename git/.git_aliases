alias gs='git status'
alias gdc='git diff --cached'

gcoprev() {
    git checkout -
}

alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'

alias gst='git stash'
alias gsta='git stash apply'
alias gstl='git stash list'

gacp() {
    git add -A
    git commit -m "$*"
    git push
}

gaafp() {
    git add -A
    git commit --amend --no-edit
    git push -f
}

# gmp: git-merge-push
# merge feature/A to dev
# example: `gmp feature/A dev`
gmp() {
   git checkout $2
   git pull
   git merge $1
   git push
}
# example: `gmerge feature/A dev`
gmerge() {
   git checkout $2
   git pull
   git merge $1
   # git push
}

# grp: git-rebase-push
# get commits from the feature branch and
# put them on to a destination(e.g master) branch
# example: `grp feature/A dev`
grp() {
    git checkout $2
    git pull
    git checkout $1
    git rebase $2
    git checkout $2
    git rebase $1
    git push
}
# example: `grebase feature/A dev`
grebase() {
    git checkout $2
    git pull
    git checkout $1
    git rebase $2
    git checkout $2
    git rebase $1
    # git push
}

gsquash() {
    commits=10
    if [ "$#" -eq  "1" ]
    then
        commits=$1
    fi
    command="git rebase -i HEAD~${commits}"
    eval $command
}

gmprev() {
    git merge -
}

gprune() {
    git remote update --prune && \
    git branch -vv | awk '/: gone]/{print $1}' | xargs --no-run-if-empty git branch -d
}

create-merge-request() {
    if [ "$#" -ne 1 ]; then
        echo "Pleave provide the branch into which you want your code merged!"
        return
    fi

    gh pr create --fill -B $1
}
