alias gs='git status'
alias gdc='git diff --cached'

alias ga='git add'
alias diffc=diff --cached

function gc { git commit -m "$@"; }
alias gca='git commit --amend --no-edit'
alias gcm='git commit -m'

alias gcod='git checkout dev'
alias gcom='git checkout master'
alias gcos='git checkout staging'
alias gcor='git checkout refactoring'
gcoprev() {
    git checkout -
}

alias gb='git-branch-fzf'
alias gcof='git-checkout-fzf'

git-branch-fzf() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
    grep -v HEAD |
    fzf --ansi  |
    sed "s/.* //"
}

git-checkout-fzf() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch=$(git-branch-fzf)

    if [[ "$branch" = "" ]]; then
        echo "No branch selected"
        return
    fi

    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

alias glog='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit'
alias glogf='git-log-fzf'
git-log-fzf() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    # filter by file string
    local filter
    # param existed, git log for file if existed
    if [ -n $@ ] && [ -f $@ ]; then
        filter="-- $@"
    fi

    # git command
    local gitlog=(
        git log
        --graph --color=always
        --abbrev=7
        --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr'
        $@
    )

    # fzf command
    local fzf=(
        fzf
        --ansi --no-sort --reverse --tiebreak=index
        --preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 $filter; }; f {}"
        --bind "ctrl-q:abort,ctrl-m:execute:
                    (grep -o '[a-f0-9]\{7\}' | head -1 |
                    xargs -I % sh -c 'git show --color=always % $filter | less -R') << 'FZF-EOF'
                    {}
                    FZF-EOF"
    --preview-window=right:60%
    )

    $gitlog | $fzf
}

alias gst='git stash'
alias gsta='git stash apply'
alias gstl='git stash list'

alias gf='git fetch'
alias gfa='git fetch --all'

# gwta() {
#     command="git worktree add ./$1 $1"
#     eval $command
# }
alias gwta='git worktree add'
alias gwtr='git worktree remove'
alias gwtp='git worktree prune'
alias gwtl='git worktree list'
alias gwt_enable_fetch="git config remote.origin.fetch 'refs/heads/*:refs/heads/*'"

gacp() {
    git add -A
    git commit -m "$*"
    git push
}

gaafp() {
    git add -A
    git commit --amend --no-edit
    git push -f
}

# gmp: git-merge-push
# merge feature/A to dev
# example: `gmp feature/A dev`
gmp() {
   git checkout $2
   git pull
   git merge $1
   git push
}
# example: `gmerge feature/A dev`
gmerge() {
   git checkout $2
   git pull
   git merge $1
   # git push
}

# grp: git-rebase-push
# get commits from the feature branch and
# put them on to a destination(e.g master) branch
# example: `grp feature/A dev`
grp() {
    git checkout $2
    git pull
    git checkout $1
    git rebase $2
    git checkout $2
    git rebase $1
    git push
}
# example: `grebase feature/A dev`
grebase() {
    git checkout $2
    git pull
    git checkout $1
    git rebase $2
    git checkout $2
    git rebase $1
    # git push
}

gsquash() {
    commits=10
    if [ "$#" -eq  "1" ]
    then
        commits=$1
    fi
    command="git rebase -i HEAD~${commits}"
    eval $command
}

gmprev() {
    git merge -
}

gprune() {
    git remote update --prune && \
    git branch -vv | awk '/: gone]/{print $1}' | xargs --no-run-if-empty git branch -d
}
